// =============================================
//    Fractional grid system by Gary Hepting
//          Last Updated:2013-4-24
//
//    ***** REQUIRES BORDER BOX SIZING *****
//
// =============================================




///////////////////////////////////////////////
//    grid system - placeholders & classes   //
///////////////////////////////////////////////

%container {
  max-width: $max-width;
  margin: 0 auto;
}

%row {
  @extend %clear;
  width: $one-whole;
}

@mixin _column() {
  float: left;
  position: relative;
  min-height: 1px;
}

%column {
  @include _column;
}

%centered {
  float: none !important;
  margin-left: auto !important;
  margin-right: auto !important;
}

@if $classes {
  .container          { @extend %container; }
  .row                { @extend %row; }
  .column             { @extend %column; }
  .centered           { @extend %centered; }
}

$selectors: if($classes, "%" ".", "%");

$numbers: one two three four five six seven eight nine ten eleven twelve;
$fractions: whole half third fourth fifth sixth seventh eighth ninth tenth eleventh twelfth;
$fractions-plural: wholes halves thirds fourths fifths sixths sevenths eighths ninths tenths elevenths twelfths;
$adapters: $one-half $one-third $one-fourth $one-fifth;

// function to generate the grid code (placeholders and optionally, classes)
@for $i from 1 through length($selectors) {
  @for $j from 1 through length($numbers) {
    #{nth($selectors, $i) + nth($fractions, $j)},
    #{nth($selectors, $i) + nth($fractions-plural, $j)} {
      width: percentage(1 / $j);
      @extend %column;
      @for $width from 1 through $j {
        &#{nth($selectors, $i) + nth($numbers, $width)} {
          width: percentage($width / $j);
          @extend %column;
        }
      }
      @for $right-left-skip from 1 through $j - 1 {
        &#{nth($selectors, $i) + "right-" + nth($numbers, $right-left-skip)} {
          left: percentage($right-left-skip / $j);
        }
        &#{nth($selectors, $i) + "left-" + nth($numbers, $right-left-skip)} {
          right: percentage($right-left-skip / $j);
        }
        &#{nth($selectors, $i) + "skip-" + nth($numbers, $right-left-skip)} {
          margin-left: percentage($right-left-skip / $j);
        }
      }
    }
  }
}

// small-tablet grid adapters
@media #{$small-tablet} {
  @for $i from 1 through 4 {
    .#{nth($numbers, ($i + 1))}-up-small-tablet {
      width: nth($adapters, $i) !important;
      clear: none !important;
      float: left !important;
    }
  }
}
// mobile grid adapters
@media #{$mobile} {
  @for $i from 1 through 4 {
    .#{nth($numbers, ($i + 1))}-up-mobile {
      width: nth($adapters, $i) !important;
      clear: none !important;
      float: left !important;
    }
  }
}

// grid classes responsive
@mixin grid-responsive($both: true) {
  // responsive grid
  %half, %halves,
  %third, %thirds,
  %fourth, %fourths,
  %fifth, %fifths,
  %sixth, %sixths,
  %seventh, %sevenths,
  %eighth, %eighths,
  %ninth, %ninths,
  %tenth, %tenths,
  %eleventh, %elevenths,
  %twelfth, %twelfths#{if($classes, ", .half, .halves, .third, .thirds, .fourth, .fourths, .fifth, .fifths, .sixth, .sixths, .seventh, .sevenths, .eighth, .eighths, .ninth, .ninths, .tenth, .tenths, .eleventh, .elevenths, .twelfth, .twelfths", "")} {
    @if $both {
      &:not(.small-tablet):not(.mobile):not(.two-up-mobile):not(.three-up-mobile):not(.four-up-mobile):not(.five-up-mobile):not(.two-up-small-tablet):not(.three-up-small-tablet):not(.four-up-small-tablet):not(.five-up-small-tablet) {
        @include grid-collapse();
      }
    }
    @else {
      &:not(.mobile):not(.two-up-mobile):not(.three-up-mobile):not(.four-up-mobile):not(.five-up-mobile) {
        @include grid-collapse();
      }
    }
  }
}

@mixin grid-collapse() {
  width:100% !important;
  float:none;
  clear:both;
  // reset push
  &%right-one,
  &%right-two,
  &%right-three,
  &%right-four,
  &%right-five,
  &%right-six,
  &%right-seven,
  &%right-eight,
  &%right-nine,
  &%right-ten,
  &%right-eleven#{if($classes, ", &.right-one, &.right-two, &.right-three, &.right-four, &.right-five, &.right-six, &.right-seven, &.right-eight, &.right-nine, &.right-ten, &.right-eleven", "")}  { left:0; }
  // reset pull
  &%left-one,
  &%left-two,
  &%left-three,
  &%left-four,
  &%left-five,
  &%left-six,
  &%left-seven,
  &%left-eight,
  &%left-nine,
  &%left-ten,
  &%left-eleven#{if($classes, ", &.left-one, &.left-two, &.left-three, &.left-four, &.left-five, &.left-six, &.left-seven, &.left-eight, &.left-nine, &.left-ten, &.left-eleven", "")}   { right:0; }
  // reset offset
  &%skip-one,
  &%skip-two,
  &%skip-three,
  &%skip-four,
  &%skip-five,
  &%skip-six,
  &%skip-seven,
  &%skip-eight,
  &%skip-nine,
  &%skip-ten,
  &%skip-eleven#{if($classes, ", &.skip-one, &.skip-two, &.skip-three, &.skip-four, &.skip-five, &.skip-six, &.skip-seven, &.skip-eight, &.skip-nine, &.skip-ten, &.skip-eleven", "")}   { margin-left:0; }
}
